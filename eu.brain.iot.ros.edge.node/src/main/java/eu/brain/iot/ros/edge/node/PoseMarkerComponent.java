package eu.brain.iot.ros.edge.node;

import ar_track_alvar_msgs.AlvarMarkers;

import java.util.concurrent.TimeUnit;

import org.ros.node.ConnectedNode;

public abstract class PoseMarkerComponent {
    private ConnectedNode node;
    private GenericSubscriber<AlvarMarkers> poseMarker;
    private String robotName;

    public PoseMarkerComponent(ConnectedNode node, String robotName) {
        this.node = node;
        this.robotName = robotName;
    }

    public void register() {
        poseMarker = new GenericSubscriber<AlvarMarkers>(node);
        poseMarker.register((("/"+ robotName)+"/ar_pose_marker"), "ar_track_alvar_msgs/AlvarMarkers");
    }

    public AlvarMarkers get_poseMarker_value() {
    	AlvarMarkers markers = poseMarker.getCurrentValue();  // TODO check how to decide the markers variable ==> msg type?

        while (markers == null) {
        	try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        	markers = poseMarker.getCurrentValue();
        }
        return markers;
    }
    
 /*   public AlvarMarkers get_poseMarker_value() {  // query 5 times to be used in real robot, generated by Code generator
    	AlvarMarkers markers = poseMarker.getCurrentValue();
    	int counter = 5;  
        while (markers == null && counter > 0) {
        	try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        	counter --;
        	markers = poseMarker.getCurrentValue();
        }
        return markers;
    }*/
}
