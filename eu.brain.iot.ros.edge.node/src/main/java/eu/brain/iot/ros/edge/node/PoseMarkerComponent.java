/*******************************************************************************
 * *  Copyright (C) 2021 LINKS Foundation
 * 
 * This file is based on the ROSOSGi open-source project which is a part of DIANNE  -  Framework for distributed artificial neural networks
 * 
 * DIANNE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package eu.brain.iot.ros.edge.node;

import ar_track_alvar_msgs.AlvarMarkers;

import java.util.concurrent.TimeUnit;

import org.ros.node.ConnectedNode;

public abstract class PoseMarkerComponent {
    private ConnectedNode node;
    private GenericSubscriber<AlvarMarkers> poseMarker;
    private String robotName;

    public PoseMarkerComponent(ConnectedNode node, String robotName) {
        this.node = node;
        this.robotName = robotName;
    }

    public void register() {
        poseMarker = new GenericSubscriber<AlvarMarkers>(node);
        poseMarker.register((("/"+ robotName)+"/ar_pose_marker"), "ar_track_alvar_msgs/AlvarMarkers");
    }

    public AlvarMarkers get_poseMarker_value() {
    	AlvarMarkers markers = poseMarker.getCurrentValue();  // TODO check how to decide the markers variable ==> msg type?

        while (markers == null) {
        	System.out.println("get empty marker, read again.......");
        	try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        	markers = poseMarker.getCurrentValue();
        }
        return markers;
    }
    
 /*   public AlvarMarkers get_poseMarker_value() {  // query 5 times to be used in real robot, generated by Code generator
    	AlvarMarkers markers = poseMarker.getCurrentValue();
    	int counter = 5;  
        while (markers == null && counter > 0) {
        	try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        	counter --;
        	markers = poseMarker.getCurrentValue();
        }
        return markers;
    }*/
}
